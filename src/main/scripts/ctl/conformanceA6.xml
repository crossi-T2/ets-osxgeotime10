<?xml version="1.0" encoding="UTF-8"?>

<ctl:test xmlns:ctl="http://www.occamlab.com/ctl"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tns="http://www.opengis.net/cite/osxgeotime"
  xmlns:saxon="http://saxon.sf.net/"
  xmlns:tec="java:com.occamlab.te.TECore"
  xmlns:trax="https://github.com/Terradue/trax"

  xmlns:parsers="http://www.occamlab.com/te/parsers"

  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xi="http://www.w3.org/2001/XInclude"

  xmlns:os="http://a9.com/-/spec/opensearch/1.1/"

  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:geo="http://a9.com/-/opensearch/extensions/geo/1.0/"
  xmlns:time="http://a9.com/-/opensearch/extensions/time/1.0/"
  xmlns:dct="http://purl.org/dc/terms/"
  name="tns:ConformanceA6">
  <ctl:param name="os.description.url">OpenSearch Description URL</ctl:param>
  <ctl:assertion>The test subject satisfies the Minimum spatial operator conformance class. The server implements the intersects spatial operator.</ctl:assertion>
  <ctl:code>

    <ctl:message>
    [LOG] <xsl:value-of select="$os.description.url"/>
    </ctl:message>

    <!-- Attempt to retrieve description document -->
    <xsl:variable name="os.description.doc">
      <ctl:request>
        <ctl:url>
          <xsl:value-of select="$os.description.url"/>
        </ctl:url>
        <ctl:method>GET</ctl:method>
        <parsers:HTTPParser/>
      </ctl:request>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="not($os.description.doc/response/content/os:OpenSearchDescription/os:Url[(not(@rel) or @rel='' or @rel='results') and @type='application/atom+xml'])">
        <ctl:message>
    [ERROR] Unable to execute (no Atom URL template). Skipping test.
        </ctl:message>
        <ctl:fail/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="url" select="$os.description.doc/response/content/os:OpenSearchDescription/os:Url[(not(@rel) or @rel='' or @rel='results') and @type='application/atom+xml']/@template"/>
        <xsl:variable name="url-tokens">
            <xsl:call-template name="tokenize-url-template">
                <xsl:with-param name="string" select="$url"/>
                <xsl:with-param name="context" select="$os.description.doc/response/content/os:OpenSearchDescription"/>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="queries">
          <query status='200' type="a valid OpenSearch request covering the whole globe">
            <token type="geo:box">-180,-90,180,90</token>
          </query>
          <query status='200' type="a valid OpenSearch request covering the east hemisphere ">
            <token type="geo:box">0,-90,180,90</token>
          </query>
          <query status='200' type="a valid OpenSearch request covering the west hemisphere">
            <token type="geo:box">-180,-90,0,90</token>
          </query>
          <query status='200' type="a valid OpenSearch covering a small bounding box">
            <token type="geo:box">-10,-10,10,10</token>
          </query>
        </xsl:variable>
        <xsl:for-each select="$queries/query">
          <ctl:call-test name="tns:os-request">
            <ctl:with-param name="url-tokens">
              <value><xsl:copy-of select="$url-tokens"/></value>
            </ctl:with-param>
            <ctl:with-param name="query"><xsl:copy-of select="."/></ctl:with-param>
            <ctl:with-param name="expected.status" select="@status"/>
            <ctl:with-param name="expected.empty" select="@empty"/>
            <ctl:with-param name="description" select="@type"/>

          </ctl:call-test>
        </xsl:for-each>


        <xsl:variable name="totalResults">
          <xsl:for-each select="$queries/query">
            <count>
              <xsl:variable name="os.doc">
                <ctl:request>
                  <ctl:url>
                    <xsl:call-template name="instantiate-url-template">
                      <xsl:with-param name="tokens" select="$url-tokens"/>
                      <xsl:with-param name="request" select="."/>
                    </xsl:call-template>
                  </ctl:url>
                  <ctl:method>GET</ctl:method>
                  <parsers:HTTPParser/>
                </ctl:request>
              </xsl:variable>
              <xsl:value-of select="$os.doc/response/content/atom:feed/os:totalResults"/>
            </count>
          </xsl:for-each>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="count($totalResults/*)!=count($queries/*)">
            <ctl:message>[ERROR] Unable to perform test not the same number of responses. The server does not conforms to the Min Spatial Operator conformance class.
            </ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$totalResults/count[1] &gt; ($totalResults/count[2] + $totalResults/count[3])">
            <ctl:message>[ERROR] Global query returns more than sum of queries. The server does not conforms to the Min Spatial Operator conformance class.
            </ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$totalResults/count[1] &lt; ($totalResults/count[4])">
            <ctl:message>[ERROR] Global query returns less than smaller bounding box query. The server does not conforms to the Min Spatial Operator conformance class.
            </ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise><ctl:message>[INFO] The server conforms to the Min Spatial Operator conformance class.
          </ctl:message>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:otherwise>
    </xsl:choose>
  </ctl:code>
</ctl:test>
